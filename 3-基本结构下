什么是队列
队列是一种有次序的数据集合，其特征是
新数据项的添加总发生在一端(通常称为"尾rear"端)
而现存数据项的移除总发生在另一端(通常称为"首front"端)
当数据项加入队列，首先出现在队尾随着队首数据项的移除，它逐渐接近队首


新加入的数据项必须在数据集末尾等待，而等待时间最长的数据项则是队首
这种次序安排的原则称为（FIFO：First-in first-out）先进先出

队列仅有一个入口和出口
不允许数据项直接插入队中，也不允许从中间移除数据项

计算机科学中队列的例子：打印机、进程调度、键盘缓冲
进程数远多于CPU核心数
有些进程还要等待不同类型的I/O事件

抽象数据类型Queue
Queue():创建一个空队列对象，返回值为：Queue对象
enqueue(item)：将数据项item添加到队尾，无返回值
dequeue():从队首移除数据项，返回值为队首数据项，队列被修改
isEmpty()：测试是否空队列，返回值为布尔值
size():返回队列中数据项的个数
采用List来容纳Queue的数据项
将List首端作为队列尾端
List的末端作为队列首端
enqueue()复杂度为O(n)
dequeue()复杂度为O(1)
首尾倒过来的实现，复杂度也倒过来

class Queue:
    def __init__(self):
        self.items = []
    def isEmpty(self):
        return self.items == []
    def enqueue(self,item):
        self.items.insert(0,item)
    def dequeue(self):
        return self.item.pop()
    def size(self):
        return len(self.items)
    
 队列的应用：热土豆问题(约瑟夫问题)
 模拟程序采用队列来存放所有参加游戏的人名，
 按照传递土豆方向从队首排到队尾
 游戏时，队首始终是持有土豆的人
 
 模拟游戏开始，只需要将队首的人出队，随即再到队尾入队，算是土豆的一次传递
 传递了num次后，将队首的人移除，不再入队，由后面的人拿起继续传进行游戏，最后留下来的为胜者，如此反复，直到队列中剩余一人
 
 
from pythonds.basic.queue import Queue
def hotPotato(namelist,num):
    simqueue = Queue()
    for name in namelist:
        simqueue.enqueue(name)
    while simqueue.size() > 1:
        for i in range(num):
            simqueue.enqueue(simqueue.dequeue())
        simqueue.dequeue()
    return simqueue.dequeue()
print(hotPotato(["Bill","David","Susan","Jane","Kent","Brad"],7))
 
>>>
Susan
队列的应用:打印任务
多人共享一台打印机，采取"先到先服务"的队列策略来执行打印任务
在这种设定下，一个首要的问题就是：
这种打印作业系统的容量有多大？
在能够接受的等待时间内，系统能容纳多少用户以多高频率提交多少打印任务

一个具体的实例配置如下：
一个实验室，在任意的一个小时内，大约有10名学生在场
这一小时中，每人会发起2次左右的打印，每次1-20页
打印机的性能是:
以草稿模式打印的话，每分钟10页
以正常模式打印的话，打印质量好，但速度下降为每分钟5页
问题是：怎么设定打印机的模式，让大家都不会等太久的前提下尽量提高打印质量？
这是一个典型的决策智齿问题，但无法通过规则直接计算
我们要用一段程序来模拟这种打印任务场景，然后对程序运行结果进行分析，以支持对打印机模式设定的决策

对象：打印任务，打印队列、打印机

打印任务的属性：提交时间，打印页数
打印队列的属性:具有FIFO性质的打印任务队列
打印机的属性：打印速度，是否忙

过程：生成和提交打印任务
确定生成概率：实例为每小时会有10个学生提交的20个作业，这样，概率是每180秒会有1个作业生成并提交，概率为每秒1/180
确定打印页数：实例是1~20页，那么就是1~20页之间概率相同


过程:实施打印
当前的打印作业：正在打印的作业
打印结束倒计时：新作业开始打印时开始倒计时，回0表示打印完毕，可以处理下一个作业

模拟时间：
统一的时间框架：以最小单位（秒）均匀流逝的时间，设定结束时间
同步所有过程：在一个时间单位里，对生成打印任务和实施打印量而过程各处理一次


双端队列Deque
跟队列相似，其两端可以称作"首""尾"端，但deque中数据项计可以从队首加入，
也可以从队尾加入：数据项也可以从两端移除
某种意义上说，双端队列集成了栈和队列的能力

抽象数据类型Deque
deque定义的操作如下：
Deque():创建一个空双端队列
addFront(item):将item加入队首
addRear(item):将item加入队尾
removeFront():从队首移除数据项，返回值为移除的数据项
removeRear()：从队尾移除数据项，返回值为移除的数据项
isEmpty():返回deque是否为空
size():返回deque中包含数据项的个数

#左边是队尾，右边是队尾

python实现ADT Deque
采用List实现
List下标0作为deque的尾端
List下标-1作为deque的首端

操作复杂度
addFront/removeFont O(1)
addRear/removeRear  O(n)


class Deque:
    def __init__(self):
        self.items = []
    def isEmpty(self):
        return self.items == []
    def addFont(self,item):
        self.items.append(item)
    def addRear(self,item):
        self.items.insert(0,item)
    def removeFront(self):
        return self.items.pop()
    def removeRear(self):
        return self.items.pop(0)
    def size(self):
        return len(self.items)

"回文词判定"
用双端队列很容易解决"回文词"问题
先将需要判定的词从队尾加入deque
再从两端同时移除字符判定是否相同，直到deque中剩下0个或1个字符
from pythonds.basic.deque import Deque
def palchecker(aString):
    chardeque = Deque()
    for ch in aString:
        chardeque.addRear(ch)
    stillEqual = True
    while chardeque.size()>1 and stillEqual:
        first = chardeque.removeFront()
        last = chardeque.removeRear()
        if first != last:
            stillEqual = False
    return stillEqual
print(palchecker("lsdkjfskf"))
print(palchecker("radar"))
>>>
False
True


无序表抽象数据类型

列表List:什么是列表
一种数据项按照相对位置存放的数据集
特别的，被称为“无序表”
其中数据项只按照存放位置来索引，如第1个、第2个......最后一个等。

抽象数据类型：无序表List
List():创建一个空列表
add(item)：添加一个数据项到列表中，假设item原先不存在于列表中
remove()item:从列表中移除item，列表被修改，item原先应存在于表中
search（item):在列表中查找item，返回布尔类型值
isEmpty():返回列表是否为空
size():返回列表包含了多少数据项

append(item):添加一个数据项到表末尾，假设item原先不存在于列表中
index(item)：返回数据项插入到位置pos，
假设item原先不存在列表中，同时原列表具有足够多个数据项，能让item占据位置pos
pop()：从列表末尾移除数据项，假设源列表至少有一个数据项
pop(pos)：移除位置为pos的数据项，假设原列表存在位置pos


采用链表实现无序表
为了实现无序表数据结构，可以采用链接表的方案
虽然列表数据结构要求保持数据项的前后想怼位置，但这种前后位置的保持
并不要求数据项一次存放在连续的存储空间


采用链表实现无序表
数据项存放位置并没有规则，但如果在数据项之间建立链接指向，就可以保持其前后相对位置

链表实现：节点Node
链表实现的最基本元素是节点Node
每个节点至少要包含2个信息：数据项本身，以及指向下一个节点的引用信息
注意next为None的意义是没有下一个节点了
这个很重要

链表实现：节点Node

class Node:
    def __init__(self,initdata):
        self.data = initdata
        self.next = None
    def getData(self):
        return self.data
    def getNext(self):
        return self.next
    def setData(self,newdata):
        self.data = newdata
    def setNext(self,newnext):
        self.next = newnext

temp = Node(93)

print(temp.getData())
>>>
93

链表实现:无序表
可以采用链接节点的方式构建数据集来实现无序表
链表的第一个和最后一个节点最重要
如果想访问到链表中的所有节点，就必须从第一个节点开始沿着链接遍历下去

所以无序表必须要有对第一个节点的引用信息
设立一个属性head，保存对第一个节点的引用空表的head为None

class UnorderedList:
    def __init__(self):
        self.head = None
        

mylist = UnorderedList()
print(mylist.head)
>>>
None

随着数据项的加入，无序表的head始终指向链条中的第一个节点
注意！无序表mylist对象本身并不包含数据项(数据项在节点中)
其中包含的head只是对首个节点Node的引用判断空表的isEmpty()很容易实现

链表实现:无序表UnorderList
*接下来，考虑注入实现向无序表中添加数据项，实现add方法
*由于无序表并没有限定数据项之间的顺序
*新数据项可以加入到原表中的任何位置
*按照实现的性能考虑，应添加到最容易加入的位置上。


有链表结构我们知道要访问到整条链上的所有数据项
都必须从表头head开始沿着next链接逐个向后查找
所以添加新数据项最快捷的位置是表头，整个链表的首位置

链表实现:add方法实现
链接次序很重要
def add(self,item):
    temp = Node(item)
    temp.setNext(self.head)
    self.head = temp

链表实现:size
size：从链条头head开始遍历到表尾同时用变量累加经过的节点个数
def size(self):
    current = self.head
    count = 0
    while current != None:
        count = count + 1
        current = current.getNext()
    return count
链表实现:search
从链表头head开始遍历到表尾，同时判断当前节点的数据项是否目标

def search(self,item):
    current = self.head
    found = False
    while current != None and not found :
        if current.getData() == item:
            found = True
        else:
            current = current.getNext()
    return found

链表实现:remove(item)方法
首先要找到item，这个过程跟search一样，但在删除节点时，需要特别的技巧
current指向的是当前匹配数据项的节点
而删除需要把前一个节点的next指向current的下一个节点
所以我们在search current的同时，还要维护前一个(previous)节点的引用


找到item之后，curret指向item节点，previous指向前一个节点，开始执行删除，
需要区分两种情况:
current是首个节点；或者是位于链条中间的节点
def remove(self,item):
    current = self.head
    previous = None
    found = false
    while not found:
        if current.getData() == item:
            found = True
        else:
            previous = current
            current = current.getNext()
    if previous == None:
        self.head = current.getNext()
    else:
        previous.setNext(current.getNext())
        
抽象数据类型：有序表OrderList
有序表是一种数据项依照其某可比性质(如整数大小、字母表先后)来决定在列表中的位置
越“小”的数据项越靠近列表的头，越靠“前”

有序表所定义的操作如下：
OrderedList():创建一个空的有序表
add(item):在表中添加一个数据项，并保持整体顺序，此项原不存在
remove(item):从有序表中移除一个数据项，此项应存在，有序表被修改
search(item):在有序表中查找数据项，返回是否存在isEmpty():是否空表
size()：返回表中数据项的个数
index(item)：返回数据项在表中的位置，此项应存在
pop():移除并返回有序表中最后一项，表中应至少存在一项
pop(pos):移除并返回有序表中指定位置的数据项，此位置应存在


在实现有序表的时候，需要记住的是，数据项的想对位置，取决于他们之间的“大小”比较
由于Python的扩展性，下面对数据项的讨论并不仅适用于整数，可适用于所有定义了_get_
方法（即'>'操作符）的 数据类型

同样采用链表方法实现
Node定义相同
OraerList也设置一个head来保存链表表头的引用

class OrderList:
    def __init__(self):
        self.head = None


对于isEmpty/size/remove这些方法，与节点的次序无关，所以其实现跟UnorderedList是一样的
search/add方法则需要有修改

search方法:与无序表不相同，有序表，一旦当前节点的数据项大于所要查找的数据项，则
说明链表后面已经不可能再有要查找的数据项，可以直接返回False

def search(self,item):
    current = self.head
    found = False
    while current != None and not found and not stop:
        if current.getData() == item:
            found = True
        else:
            if current.getData() > item：
                stop = True
            else:
                current = current.getNext()
    return found

add方法:与无序表不同，有序表需要查找合适位置，使其有序性不被破坏

需要设置"前驱“

def add(self,item):
    current = self.head
    previous = None
    stop = False
    while current != None and not stop:
        #发现插入位置
        if current.getData()>item:
            stop = True
        else:
            previous = current
            current = current.getNext()
    temp = Node(item)
    #插入表头
    if previous == None:
        tremp.setNext(self.head)
        self.head = temp
    #插入表中
    else:
        temp.setNext(self.head)
        self.head = temp
        
#关于链表复杂度的分析，主要是看相应的方法是否涉及到链表的遍历
isEmpty(O(1))
size(O(n))
search/remove/add（O(n)） 按照概率其平均操作的次数是n/2














 
 
 
 
 
 
    
    
    
    
    
    
    
    
    
    
    
    
