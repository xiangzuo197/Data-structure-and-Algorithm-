分治策略
解决问题的典型策略：分而治之
将问题分为若干更小规模的部分
通过解决每一个小规模部分问题，并将结果汇总得到原问题的解

递归三定律：
基本结束条件，解决最小规模问题
缩小规模，向基本结束条件演进
调用自身来解决已缩小规模的相同问题

体现了分治策略：
问题解决依赖于若干缩小了规模的问题
汇总得到原问题的解

应用相当广泛：排序，查找，遍历，求值等等

优化问题和贪心策略
一个经典案例是兑换最少个数的硬币问题
人们会采用各种策略来解决这些问题，例如最直观的“贪心策略”

一般我们这么做：
从最大面值的硬币开始，用尽量多的数量
有余额的，再到下一最大面值的硬币，还用尽量多的数量，一直到penny为止

贪心策略
因为我们每次都试图解决问题的尽量大的一部分
对应到兑换硬币问题，就是每次以最多数量的最大面值硬币来迅速减少找零面值

贪心策略解决找零兑换问题，在美元或其他货币的硬币体系下表现尚好（严重依赖于具体的硬币体系）

找零兑换问题的递归解法

来找一种肯定能找到最优解的方法
首先是确定基本结束条件，兑换硬币这个问题最简单直接的情况就是，需要兑换的找零
其面值正好等于某种硬币

其次是减小问题的规模，我们要对每种硬币尝试1次，例如美元硬币体系
找零减去1分(penny)后，求兑换硬币最少数量(递归调用自身)
找零减去5分(nikel)后，求兑换硬币最少数量
找零减去10分(dime)后，求兑换硬币最少数量
找零减去25分(quarter)后，求兑换硬币最少数量
上述4项中选择最小的一个


def recMC(coinValueList,change):
    minCoins = change
    #最小规模直接返回
    if change in coinValueList:
        return 1
    else:
        for i in [c for c in coinValueList if c <= change]:
        #调用自身，减小规模：每次见去一种硬币面值，挑选最小数量
            numCoins = 1 + recMC(coinValueList,change-i)
            if numCoins < minCoins:
                minCoins = numCoins
    return minCoins

print(recMC([1,5,10,25],63))
>>>
6

#40秒，递归解法很低效
对这个递归解法进行改进的关键就在于消除重复计算
我们可以用一个表将计算过的中间结果保存起来，在计算之前查表看看是否已经计算过
这个算法的中间结果就是部分找零的最优解，在递归调用过程中已经得到的最优解被记录下来

在递归调用之前，先查找表中是否已有部分找零得最优解
如果有，直接返回最优解而不进行递归调用
如果没有，才进行递归调用

import time
def recMC(coinValueList,change,knownResults):
    minCoins = change
    if change in coinValueList:
        knownResults[change] = 1
        return 1
    elif knownResults[change] > 0:
        return knownResults[change]
    else:
        for i in [c for c in coinValueList if c <= change]:
            numCoins = 1 + recMC(coinValueList,change-i,knownResults)
            if numCoins < minCoins:
                minCoins = numCoins
                knownResults[change] = minCoins
    return minCoins
print(time.clock())
print(recMC([1,5,10,25],63,[0]*64))
print(time.clock())

0.5936201
6
0.6410098

找零兑换：动态规划解法

中间结果记录可以很好解决找零兑换问题
实际上，这种方法还不能称为动态规划，而是叫做“memoization(记忆化/函数值缓存)”的技术提高了递归解法的性能

动态规划算法采用了一种更有条理得方式来得到问题得解
找零兑换得动态规划算法从最简单得“1分钱找零”得最优解开始，逐步递加上去，直到我们需要找零钱数
在找零递加得过程中，设法保持每一分钱得递加都是最优解，一直加到求解找零钱数，自然得到最优解

递加的过程能保持最优解的关键是：
其依赖于更少钱数最优解的简单计算，而更少钱数的最优解已经得到了

问题的最优解包含了更小规模子问题的最优解，这是一个最优化问题能够用动态规划策略解决的必要条件
def dpMakeChange(coinValueList,change,minCoins):
    #从1分钟开始到change逐个计算最少硬币书
    for cents in range(1,change+1):
        #1.初始化一个最大值
        coinCount = cents
        # 2.减去每个硬币，向后查最少硬币数，同时记录总的最少数
        for j in [c for c in coinValueList if c <= cents]:
            if minCoins[cents - j] + 1 < coinCount:
                coinCount = minCoins[cents - j] + 1
            # 3.得到当前最少硬币数，记录到表中
        minCoins[cents] = coinCount
        #返回最后一个结果
    return minCoins[change]
print(dpMakeChange([1,5,10,21,25],63,[0]*64))
>>>
3

动态规划中最主要的思想是：
从最简单情况开始到达所需找零的循环
其每一步都依靠以前的最优解来得到本步骤的最优解，直到得到答案

找零兑换：动态规划算法扩展代码
def dpMakeChange(coinValueList,change,minCoins,coinsUsed):
    
    for cents in range(1,change+1):
       
        coinCount = cents
        newCoin = 1
        for j in [c for c in coinValueList if c <= cents]:
            if minCoins[cents - j] + 1 < coinCount:
                coinCount = minCoins[cents - j] + 1
                newCoin = j #对应最小数量，所减的硬币
        minCoins[cents] = coinCount
        coinsUsed[cents] = newCoin #记录本步骤加的1个硬币
    return minCoins[change]
def printCoins(coinUsed,change):
    coin = change
    while coin > 0:
        thisCoin = coinUsed[coin]
        print(thisCoin)
        coin = coin - thisCoin


amnt =63
clist = [1,5,10,21,25]
coinsUsed = [0] * (amnt + 1)
coinCount = [0] * (amnt + 1)
print("Making change for",amnt,"requires")
print(dpMakeChange(clist,amnt,coinCount,coinsUsed),"coins")
print("They are：")
printCoins(coinsUsed,amnt)
print("The used list is as follows:")
print(coinsUsed)


动态规划案例分析
讨论：博物馆大盗问题
大盗潜入博物馆，面前有五件宝物，分别有重量和价值，
大盗的背包仅能负重20公斤，请问如何选择宝物，总价值最高
item   weight  value  
1        2      3
2        3      4
3        4      8
4        5      8
5        9      10

动态规划：
#宝物的重量和价值
tr = [None,{'w':2,'v':3},{'w':3,'v':4},
           {'w':4,'v':8},{'w':5,'v':8},
           {'w':9,'v':10}]

# 大盗最大承重
max_w = 20

#初始化二维表格m[(i,w)]
#表示前i个宝物中，最大重量w的组合，所得到的最大价值
#当i什么都不取，或w上限为0，价值均为0
m = {(i,w):0 for i in range(len(tr))
             for w in range(max_w + 1 )}

#逐个填写二维表格
for i in range(1,len(tr)):
    for w in range(1,max_w + 1):
        if tr[i]['w'] > w: #装不下第i个宝物
            m[(i,w)] = m[(i-1,w)] #不装第i个宝物
        else:
            #不装第i个宝物，装第i个宝物，两种情况下最大价值
            m[(i,w)] = max(m[(i-1,w)],m[(i-1,w-tr[i]['w'])]+tr[i]['v'])

#输出结果
print(m[(len(tr)-1,max_w)])
>>>
29

递归
#宝物的重量和价值
tr = {(2,3),(3,4),(4,8),(5,8),(9,10)}

#大盗最大承重
max_w = 20

#初始化记忆化表格m
#key是（宝物组合，最大重量），value是最大价值
m = {}

def thief(tr,w):
    if tr == set() or w == 0:
        m[(tuple(tr),w)] = 0  #tuple是key的要求
        return 0
    elif (tuple(tr),w) in m:
        return m[(tuple(tr),w)]
    else:
        vmax = 0
        for t in tr:
            if t[0] <= w:
                #逐个从集合中去掉某个宝物，递归调用
                #选出所有价值中的最大值
                v = thief(tr-{t},w-t[0]) + t[1]
                vmax = max(vmax,v)
        m[(tuple(tr),w)] = vmax
        return vmax
print(thief(tr,max_w))

29

动态规划可以用递归算法表达，递归算法也可以用动态规划表达

递归是自顶向下
动态是最优小解构成最终最优解
























































