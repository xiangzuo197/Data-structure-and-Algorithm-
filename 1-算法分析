#大O数量级用来评判算法的复杂度指标O(n)
"""
常见的大O数量级函数
f(n)      名称
 1        #常数
 log(n)   #对数
 n        #线性
 n*log(n) #对数线性
 n^2      #平方
 n^3      #立方
 2^n      #指数
 
 
 "变位词"判断问题(可以很好展示同一个问题的不同数量级算法)
""" 
解法1:逐字检查

def anagramSolution1(s1,s2):
    #复制s2到列表
    alist = list(s2)
    pos1 = 0
    stillok = True
    #循环s1的每个字符
    while pos1 < len(s1) and stillok:
        pos2=0
        found= False
        #在s2逐个对比
        while pos2 < len(alist) and not found:
            if s1[pos1] ==alist[pos2]:
                  found = True
             else:
                  pos2 = pos2+1
          if found:
                #找到，打勾
                alist[pos2] = None
           else:
                #未找到，失败
                stillok = False
           pos1 = pos1  + 1
      return stillok
      
解法2：排序比较
def anagramSolution2(s1.s2):
    #转为列表
    alist =  list(s1)
    alist2 = list(s2)
    #分别排序
    alist1.sort()
    alist2.sort()
    pos = 0
    matches = True
    while pos < len(s1) and matches:
          #逐个对比
          if alist1[pos] == alist2[pos]:
              pos = pos+1
          else:
              matches = False
     return matches
#字符串无法排序，转为列表就可以
虽然数量级减少，但时间花在排序上


解法3：暴力法
#暴力法：穷尽所有可能组合
#将s1中出现的字符进行全排列，再查看s2是否出现在全排列列表中
#这里最大的困难是产生s1所有字符的全排列

已知n！增长速度甚至超过2^n
结论：暴力法不是个好方法

解法4：计数法
解题思路:对比两个词中每个字母出现的次数，如果26个字母出现的次数都相同的话，这两个字符串就一定是变位词
具体做法:为每个词设置一个26为计数器，先检查每个词，在计数器中设定好每个字母出现的次数

计数完成后，进入比较阶段，看两个字符串的计数器是否相同，如果相同则输出是变为词的结论

def anagramSolution(s1,s2):
    c1 = [0]*26
    c2 = [0]*26
    #分别计数
    for i in range(len(s1)):
        pos=ord(s1[i])-ord('a')
        c1[pos]=c2[pos] +1
    j=0
    stillok = True
    #计数比较
    while j<26 and stillok:
          if c1[j] == c2[j]:
              j = j+1
          else: 
              stillok = False
     return stillok      

#o(n)性能比较优


python数据类型的性能

#讨论python两种内置数据类型上各种操作的大O数量级
#列表list和字典dict

对比list和dict的操作
类型    list                dict
索引    自然数i             不可类型值key
        append、extend、   
添加    insert              b[k]=v
删除    pop、remove*        pop
更新    a[i]=v              b[k]=v
正查    a[i]、a[i:j]        b[k]、copy
反查    index(v)、count(v)  无
其他    reverse、sort       has_key、update
 
 4种生成前n个整数列表的方法
 首先是循环连接列表(+)方式生成
 def test1():
      l=[]
      for i in range(1000):
          l = l + [i]
 然后是用append 方法添加元素生成
 def test1():
      l=[]
      for i in range(1000):
          l.append(i)
  接着用列表推导式来做
  def test3():
      l=[i for i in range(1000)]
  最后是range函数调用转换成列表
  def test():
      l=list(range(1000))
      
       
 使用timeit模块对函数计时
 
 创建一个Timer对象，指定需要反复运行的语句和只需运行一次的“安装语句”
 然后调用这个对象的timeit方法，其中可以指定反复运行多少次
 
 from timeit import Timer
 t1 = Timer("test1()","from__main__import test1")
 print("concat %f seconds\n" % t1.timeit(number=1000))
 
 t2 = Timer("test2()","from__main__import test2")
 print("concat %f seconds\n" % t2.timeit(number=1000))


 t3 = Timer("test3()","from__main__import test3")
 print("concat %f seconds\n" % t3.timeit(number=1000))

 t4 = Timer("test4()","from__main__import test4")
 print("concat %f seconds\n" % t4.timeit(number=1000))
 














