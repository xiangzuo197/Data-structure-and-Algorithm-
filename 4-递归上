什么是递归Recursion
递归式一种解决问题的方法，其精髓在于将问题分解为规模更小的相同问题
持续分解，直到问题规模小到可以用非常简单直接地方式来解决
递归的问题分解方式非常独特，其算法方面的明显特征就是：在算法流程中调用自身

初识递归:数列求和
问题:给定一个列表，返回所有数的和
列表中数的个数不定，需要一个循环和一个累加变量来迭代求和

程序很简单，但假如没有循环语句
既不能用for,也不能用while
还能对不确定长度的列表求和么？
def listsum(numList):
    theSum = 0
    for i in numList:
        theSum = theSum + i
    return theSum
print(listsum([1,3,5,7,9]))


我们认识到的求和实际上最终是由一次次的加法实现的，而加法恰有2个操作数，这个是确定的
看看怎么想办法，将问题规模较大的列表求和，分解为规模较小而且固定的2个数求和(加法)
同样是求和问题，但规模发生了变化，符合递归解决问题的特征

可以把求和问题归纳成这样：
数列的和 = “首个数” + “余下数列” 的和
如果数列包含的数少到只有1个的话，它的和就是这个数了
这是规模小到可以做最简单的处理

def listsum(numList):
    if len(numList) == 1:
        return numList[0]
    else:
        return numList[0] + listsum(numList[1:])
print(listsum([1,3,5,7,9]))

上面程序的要点:
1.问题分解为更小规模的相同问题，并表现为"调用自身"
2.对“最小规模”问题的解决：简单直接

递归“三定律”
1.递归算法必须有一个基本结束条件(最小规模问题的直接解决)
2.递归算法必须能改变状态向基本结束条件演进(减小问题规模)
3.递归算法必须调用自身(解决减小了规模的相同问题)

递归的应用：任意进制转换

递归和栈，一定有关联

二进制到十六进制任意转换

十进制有是个不同的符号：convString = “0123456789”
比十小的整数，转换成十进制，直接查表就可以了：convString[n]
想办法把比十大的整数，拆成一系列比十 小的整数，逐个查表
比如七百六十九，拆成七、六、九，查表得到769就可以了

所以，在递归三定律里，我们找到了“基本结束条件”，就是小于十的整数
拆解整数的过程就是向“基本结束条件”演进的过程
我们用整数除，和求余数两个计算来将整数一步步拆开
除以“进制基base”(//base)
对“进制基”求余数（%base）

问题就分解为:
余数总小于“进制基base”，是“基本结束条件”，可直接进行查表转换
整数商称为“更小规模”问题，通过递归调用自身解决

def toStr(n,base):
    convertString = "0123456789ABCDEF"
    if n < base:
        return convertString[n]
    else:
        return toStr(n//base,base) + convertString[n%base]
print(toStr(1453,16))

>>>
5AD

递归调用的实现
当一个函数被调用的时候，系统会把调用时的现场数据压入到系统调用栈
每次调用，压入栈的现场数据源称为栈帧
当函数返回时，要从调用栈的栈顶取得返回地址，回复现场，弹出栈帧，按地址返回

Python中的递归深度限制
*在调试递归算法程序的时候经常会碰到这样的错误：RecursionError
递归的层数太多，系统调用栈容量有限

*这时候要检查程序中是否忘记设置基本结束条件，导致无限递归
或者向基本结束条件演进太慢，导致递归层数太多，调用栈溢出


*在Python内置的sys模块可以获取和调整最大递归深度
import sys
sys.getrecursionlimit()
sys.getrecursionlimit(3000)

递归可视化：分形树

递归可视化:图示
Python的海归作图系统turtle module
python内置，随时可用，以LOGO语言的创意为基础
其意象为模拟海龟在沙滩上爬行而留下的足迹

爬行:forward(n);backward(n)
转向:left(a);right(a)
抬笔放笔：penup();pendown()
笔属性：pensize(s);pencolor(c)

>>> import turtle
>>> t = turtle.Turtle()
>>> t.forward(100)
>>> turtle.done()

一个递归作图的例子:螺旋
import turtle
t = turtle.Turtle()
def drawSpiral(t,lineLen):
    if lineLen > 0:
        t.forward(lineLen)
        t.right(90)
        drawSpiral(t,lineLen-5)
drawSpiral(t,100)
turtle.done()


分形是在不同尺度上都具有相似性的事物

#画个小树
import turtle

def tree(branch_len):
    if branch_len > 5:
        t.forward(branch_len)
        t.right(20)
        tree(branch_len-15)
        t.left(40)
        tree(branch_len-15)
        t.right(20)
        t.backward(branch_len)

t = turtle.Turtle()
t.left(90)
t.penup()
t.backward(100)
t.pendown()
t.pencolor('green')
t.pensize(2)
tree(75)
t.hideturtle()
turtle.done()

递归可视化:谢尔宾斯基三角形




汉诺塔的问题

探索迷宫


